Tarefa de programação: Programa completo - Similaridades entre textos - Caso COH-PIAH

import re

def le_assinatura():
   
    print("Bem-vindo ao detector automático de COH-PIAH.")
    print()
    wal = float(input("digite um número: "))
    ttr = float(input("digite um número: "))
    hlr = float(input("digite um número: "))
    sal = float(input("digite um número: "))
    sac = float(input("digite um número: "))
    pal = float(input("digite um número: "))

    return [wal, ttr, hlr, sal, sac, pal]

def le_textos():
    i = 1
    textos = []
    texto = input("Num fabulário ainda por encontrar será um dia lida esta fábula: A uma bordadora dum país longínquo foi encomendado pela sua rainha que bordasse, sobre seda ou cetim, entre folhas, uma rosa branca. A bordadora, como era muito jovem, foi procurar por toda a parte aquela rosa branca perfeitíssima, em cuja semelhança bordasse a sua. Mas sucedia que umas rosas eram menos belas do que lhe convinha, e que outras não eram brancas como deviam ser. Gastou dias sobre dias, chorosas horas, buscando a rosa que imitasse com seda, e, como nos países longínquos nunca deixa de haver pena de morte, ela sabia bem que, pelas leis dos contos como este, não podiam deixar de a matar se ela não bordasse a rosa branca. Por fim, não tendo melhor remédio, bordou de memória a rosa que lhe haviam exigido. Depois de a bordar foi compará-la com as rosas brancas que existem realmente nas roseiras. Sucedeu que todas as rosas brancas se pareciam exactamente com a rosa que ela bordara, que cada uma delas era exactamente aquela. Ela levou o trabalho ao palácio e é de supor que casasse com o príncipe. No fabulário, onde vem, esta fábula não traz moralidade. Mesmo porque, na idade de ouro, as fábulas não tinham moralidade nenhuma."+str(i) +" (aperte enter para sair):")
    print()
    while texto:
        textos.append(texto)
        i += 1
        texto = input("Voltei-me para ela; Capitu tinha os olhos no chão. Ergueu-os logo, devagar, e ficamos a olhar um para o outro... Confissão de crianças, tu valias bem duas ou três páginas, mas quero ser poupado. Em verdade, não falamos nada; o muro falou por nós. Não nos movemos, as mãos é que se estenderam pouco a pouco, todas quatro, pegando-se, apertando-se, fundindo-se. Não marquei a hora exata daquele gesto. Devia tê-la marcado; sinto a falta de uma nota escrita naquela mesma noite, e que eu poria aqui com os erros de ortografia que trouxesse, mas não traria nenhum, tal era a diferença entre o estudante e o adolescente. Conhecia as regras do escrever, sem suspeitar as do amar; tinha orgias de latim e era virgem de mulheres." + str(i) +" (aperte enter para sair):")
        print()

    return textos

def separa_sentencas(texto):
    
    sentencas = re.split(r'[.!?]+', texto)
    if sentencas[-1] == '':
        del sentencas[-1]
    
    return sentencas

def separa_frases(sentenca):
  
    return re.split(r'[,:;]+', sentenca)

def separa_palavras(frase):
    
    return frase.split()

def n_palavras_unicas(lista_palavras):
  
    freq = dict()
    unicas = 0
    for palavra in lista_palavras:
        p = palavra.lower()
        if p in freq:
            if freq[p] == 1:
                unicas -= 1
            freq[p] += 1
        else:
            freq[p] = 1
            unicas += 1

    return unicas

def n_palavras_diferentes(lista_palavras):
    
    freq = dict()
    for palavra in lista_palavras:
        p = palavra.lower()
        if p in freq:
            freq[p] += 1
        else:
            freq[p] = 1

    return len(freq)

def compara_assinatura(as_a, as_b):
    
    grauSimilaridade = 0
    for i in range(len(as_a)):
        grauSimilaridade += abs(as_a[i]-as_b[i])
   
    grauSimilaridade = grauSimilaridade / 6

    return grauSimilaridade

def calcula_assinatura(texto):
    
    sentencas_texto = separa_sentencas(texto)
    palavras_texto = [] 
    soma_caracteres_texto = 0 
    soma_caracteres_sentenca = 0 
    soma_numero_frases = 0
    soma_caracteres_frase = 0

    for sentenca in range(len(sentencas_texto)):
        aux_sentenca = separa_frases(sentencas_texto[sentenca]) 
        soma_caracteres_sentenca += len(sentencas_texto[sentenca])
        soma_numero_frases += len(separa_frases(sentencas_texto[sentenca]))

        for frase in range(len(aux_sentenca)):
            palavras = separa_palavras(aux_sentenca[frase]) 
            soma_caracteres_frase += len(aux_sentenca[frase])

            for palavra in range(len(palavras)):
                palavras_texto.append(palavras[palavra])
                soma_caracteres_texto += len(palavras[palavra])

    
    wal = soma_caracteres_texto / len(palavras_texto)
    
    ttr = n_palavras_diferentes(palavras_texto) / len(palavras_texto)
        
    hlr = n_palavras_unicas(palavras_texto) / len(palavras_texto)
   
    sal = soma_caracteres_sentenca / len(sentencas_texto)
 
    sac = soma_numero_frases / len(sentencas_texto)
    
    pal = soma_caracteres_frase / soma_numero_frases

    return [wal, ttr, hlr, sal, sac, pal]

def avalia_textos(textos, ass_cp):
 
    assComparar = []
    grauSimilaridade = [1000]
    for i in range(len(textos)):
        assComparar.append(calcula_assinatura(textos[i]))
        grauSimilaridade.append(compara_assinatura(ass_cp, assComparar[i]))
        if grauSimilaridade[-1] < grauSimilaridade[-2]:
            menorGrau = i

    return menorGrau + 1



ass_cp = le_assinatura()
print()

textos = le_textos()
print()

cohpiah = avalia_textos(textos, ass_cp)

print('O autor do texto', str(cohpiah), 'está infectado com COH-PIAH')
