Exercício 1 - Primos
Escreva a função n_primos que recebe como argumento um número inteiro maior ou igual a 2 como parâmetro e devolve a quantidade de números primos que existem entre 2 e n
(incluindo 2 e, se for o caso, n).

Exemplo:
>>>n_primos(2)
1
>>>n_primos(4)
2
>>>n_primos(121)
30

def primo(x):
    fator = 2
    while(x % fator != 0) and (fator <=x/2):
        fator = fator + 1
    if (x % fator != 0) or (x == 2):
        return True
    else:
        return False

def n_primos(x):
    i = 2
    count = 0
    fator = 2
    while(i <= x):
        if(primo(i)):
            count = count + 1
        i = i + 1
    return count

print(n_primos(int(input('2: '))))

Exercício 2 - (Difícil) Soma das hipotenusas
Dizemos que um número é uma hipotenusa de um triângulo inteiro se existe um triângulo retângulo com lados inteiros cuja hipotenusa é igual a esse número. Em outras palavras, nn é uma hipotenusa se existem números inteiros ii e jj tais que:

 n^2 = i^2 + j^2 n 
2
 =i 
2
 +j 
2
 

Escreva uma função soma_hipotenusas que receba como parâmetro um número inteiro positivo  n n e devolva a soma de todos os inteiros entre 1 e  n n que são comprimento da hipotenusa de algum triângulo retângulo com catetos inteiros.

DIca1: um mesmo número pode ser hipotenusa de vários triângulos, mas deve ser somado apenas uma vez. Uma boa solução para este exercício é fazer um laço de 1 até  n n testando se o número é hipotenusa de algum triângulo e somando em caso afirmativo. Uma solução que dificilmente vai dar certo é fazer um laço construindo triângulos e somando as hipotenusas inteiras encontradas.

Dica2: primeiro faça uma função é_hipotenusa que diz se um número inteiro é o comprimento da hipotenusa de um triângulo com lados de comprimento inteiro ou não.

Exemplo: 

# Para n = 25, as hipotenusas são:
# 5, 10, 13, 15, 17, 20, 25
# note que cada número deve ser somado apenas uma vez. Assim:
soma_hipotenusas(25)
# deve devolver 105


def e_hipotenusa(num):
    aux1 = 1

    while aux1 <= num:
        aux2 = 1
        while aux2 <= num:
            hipo = (aux1 ** 2 + aux2 ** 2) ** (0.5)
            if hipo == num:
                return True
            aux2 += 1
        aux1 += 1

    return False

def soma_hipotenusas(num):
    aux = 1
    soma = 0

    while aux <= num:
        if e_hipotenusa(aux):
            soma += aux
        aux += 1
    return soma

if __name__ == '__main__':
    num = int(input("25: "))

    print(soma_hipotenusas(num))
