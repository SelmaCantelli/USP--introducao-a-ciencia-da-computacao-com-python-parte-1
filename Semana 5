Exercício 1 - FizzBuzz
Escreva a função fizzbuzz que recebe como parâmetro um número inteiro e devolve

'Fizz' se o número for divisível por 3 e não for divisível por 5;

'Buzz' se o número for divisível por 5 e não for divisível por 3;

'FizzBuzz' se o número for divisível por 3 e por 5;

Caso o número não seja divisível 3 e também não seja divisível por 5, ela deve devolver o número recebido como parâmetro.

Exemplos de execução no Python Shell


>>>fizzbuzz(3)
"Fizz"
>>>fizzbuzz(5)
"Buzz"
>>>fizzbuzz(15)
"FizzBuzz"
>>>fizzbuzz(4)

As cadeias de caracteres Fizz e Buzz devem respeitar letras maiúsculas e minúsculas

# -*- coding: utf-8 -*-
valor = int(input('Digite um numero: '))
if (valor % 5) or (valor % 3):
  print(valor)
else :
  print("FizzBuzz")



Exercício 2 - Máximo com 3 parâmetros
Reescreva a função 'maximo' do outro exercício, que devolve o maior valor dentre dois inteiros recebidos, para que ela passe a receber 3 valores inteiros como parâmetros e devolva o maior dentre eles.

Exemplos de execução no Python Shell

>>>maximo(30, 14, 10)
30
>>>maximo(0, -1, 1)

# Recebe três números e retorna o número de maior valor
def maximo(numero1, numero2, numero3):
    maiorNumero = 0
    numeros = (numero1, numero2, numero3)

    for chave, numeroCorrente in enumerate(numeros):
        if numeroCorrente > maiorNumero:
            maiorNumero = numeroCorrente

    return maiorNumero

# Recebe uma lista de números e retorna o número de maior valor
def maximoMelhorada(numeros = []):
    numeros.sort()
    return numeros[(len(numeros) - 1):len(numeros)]

# Realiza o teste na função maximo com numeros positivos
def test_MaiorEntreNumerosPositivos():
    assert 101 == maximo(101, 5, 87)

# Realiza o teste na função maximo com numeros negativos
def test_MaiorEntreNumerosNegativos():
    assert 0 == maximo(-5, -325, 0)

# Realiza o teste na função maximo com numeros positivos e negativos
def test_MaiorEntreNumerosPositivosENegativos():
    assert 42 == maximo(-5, 0, 42)
